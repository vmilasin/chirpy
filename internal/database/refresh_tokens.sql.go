// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkRefreshTokenValidity = `-- name: CheckRefreshTokenValidity :one
SELECT revoked_at, user_id
FROM refresh_tokens
where refresh_token =$1
`

type CheckRefreshTokenValidityRow struct {
	RevokedAt sql.NullTime `json:"revoked_at"`
	UserID    uuid.UUID    `json:"user_id"`
}

func (q *Queries) CheckRefreshTokenValidity(ctx context.Context, refreshToken string) (CheckRefreshTokenValidityRow, error) {
	row := q.db.QueryRowContext(ctx, checkRefreshTokenValidity, refreshToken)
	var i CheckRefreshTokenValidityRow
	err := row.Scan(&i.RevokedAt, &i.UserID)
	return i, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id, refresh_token, expires_at)
VALUES ($1, $2, $3)
RETURNING refresh_token
`

type CreateRefreshTokenParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	var refresh_token string
	err := row.Scan(&refresh_token)
	return refresh_token, err
}

const getRefreshTokenForUser = `-- name: GetRefreshTokenForUser :one
SELECT id, user_id, refresh_token, created_at, expires_at, revoked_at, updated_at
FROM refresh_tokens
WHERE user_id = $1 and revoked_at IS NULL
`

func (q *Queries) GetRefreshTokenForUser(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenForUser, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET
    revoked_at = CURRENT_TIMESTAMP
WHERE refresh_token =$1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, refreshToken)
	return err
}
