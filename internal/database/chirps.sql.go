// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (user_id, body)
VALUES ($1, $2)
RETURNING id, body
`

type CreateChirpParams struct {
	UserID uuid.UUID
	Body   string
}

type CreateChirpRow struct {
	ID   uuid.UUID
	Body string
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (CreateChirpRow, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.UserID, arg.Body)
	var i CreateChirpRow
	err := row.Scan(&i.ID, &i.Body)
	return i, err
}

const getChirpAll = `-- name: GetChirpAll :many
SELECT id, user_id, body, created_at, updated_at
FROM chirps
`

func (q *Queries) GetChirpAll(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpByID = `-- name: GetChirpByID :one
SELECT id, user_id, body, created_at, updated_at
FROM chirps
WHERE id = $1
`

func (q *Queries) GetChirpByID(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpByID, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChirpFromUser = `-- name: GetChirpFromUser :one
SELECT id, user_id, body, created_at, updated_at
FROM chirps
WHERE user_id = $1
`

func (q *Queries) GetChirpFromUser(ctx context.Context, userID uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpFromUser, userID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
