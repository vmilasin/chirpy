// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (user_id, body)
VALUES ($1, $2)
RETURNING id, user_id, body, created_at, updated_at
`

type CreateChirpParams struct {
	UserID uuid.UUID `json:"user_id"`
	Body   string    `json:"body"`
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.UserID, arg.Body)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :exec
DELETE FROM chirps 
WHERE id = $1
`

func (q *Queries) DeleteChirp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, id)
	return err
}

const getChirpAll = `-- name: GetChirpAll :many
SELECT
    id AS "id", --json:"id"
    body AS "body", --json:"body"
    user_id AS "user_id", --json:"user_id"
    created_at AS "created_at", --json:"created_at"
    updated_at AS "updated_at" --json:"updated_at"
FROM chirps
ORDER BY 
    CASE WHEN $1 THEN created_at END DESC,
    CASE WHEN NOT $1 THEN created_at END ASC
`

type GetChirpAllRow struct {
	ID        uuid.UUID `json:"id"`
	Body      string    `json:"body"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetChirpAll(ctx context.Context, dollar_1 interface{}) ([]GetChirpAllRow, error) {
	rows, err := q.db.QueryContext(ctx, getChirpAll, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChirpAllRow
	for rows.Next() {
		var i GetChirpAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpByID = `-- name: GetChirpByID :one
SELECT id, user_id, body, created_at, updated_at
FROM chirps
WHERE id = $1
`

func (q *Queries) GetChirpByID(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpByID, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChirpsFromAuthor = `-- name: GetChirpsFromAuthor :many
SELECT
    id AS "id", --json:"id"
    body AS "body", --json:"body"
    user_id AS "user_id", --json:"user_id"
    created_at AS "created_at", --json:"created_at"
    updated_at AS "updated_at" --json:"updated_at"
FROM chirps
WHERE user_id = $1
ORDER BY 
    CASE WHEN $2 THEN created_at END DESC,
    CASE WHEN NOT $2 THEN created_at END ASC
`

type GetChirpsFromAuthorParams struct {
	UserID  uuid.UUID   `json:"user_id"`
	Column2 interface{} `json:"column_2"`
}

type GetChirpsFromAuthorRow struct {
	ID        uuid.UUID `json:"id"`
	Body      string    `json:"body"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetChirpsFromAuthor(ctx context.Context, arg GetChirpsFromAuthorParams) ([]GetChirpsFromAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsFromAuthor, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChirpsFromAuthorRow
	for rows.Next() {
		var i GetChirpsFromAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
